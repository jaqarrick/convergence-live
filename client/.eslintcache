[{"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/index.tsx":"1","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/reportWebVitals.ts":"2","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/App.tsx":"3","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/service/socket.ts":"4","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/usePeers.ts":"5","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/components/Video.tsx":"6","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/index.ts":"7","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveICECandidate.ts":"8","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/errorHandlers.ts":"9","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/localDescriptionCreated.ts":"10","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveAnswer.ts":"11","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/handleICECandidate.ts":"12","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveOffer.ts":"13"},{"size":500,"mtime":1607724429114,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":1607724429117,"results":"16","hashOfConfig":"15"},{"size":894,"mtime":1608091408195,"results":"17","hashOfConfig":"15"},{"size":125,"mtime":1607817099505,"results":"18","hashOfConfig":"15"},{"size":6167,"mtime":1608087630276,"results":"19","hashOfConfig":"15"},{"size":390,"mtime":1607914431286,"results":"20","hashOfConfig":"15"},{"size":333,"mtime":1608085287568,"results":"21","hashOfConfig":"15"},{"size":204,"mtime":1608084971177,"results":"22","hashOfConfig":"15"},{"size":113,"mtime":1608084989757,"results":"23","hashOfConfig":"15"},{"size":490,"mtime":1608085788230,"results":"24","hashOfConfig":"15"},{"size":365,"mtime":1608084420041,"results":"25","hashOfConfig":"15"},{"size":475,"mtime":1608085251312,"results":"26","hashOfConfig":"15"},{"size":951,"mtime":1608085798719,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"n42azx",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/index.tsx",[],["56","57"],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/reportWebVitals.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/App.tsx",["58"],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/service/socket.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/usePeers.ts",["59","60","61","62"],"import { useCallback, useState, useEffect } from \"react\"\nimport { socket } from \"./service/socket\"\nimport { ICEPayload, OfferPayload, PeerObject } from \"../../../Types\"\nimport {\n\tonSuccess,\n\tonError,\n\thandleICECandidate,\n\treceiveOffer,\n\treceiveICECandidate,\n\tlocalDescriptionCreated,\n\treceiveAnswer,\n} from \"./helpers/index\"\n\n//STUN Server Configuration\nconst serverConfig = {\n\ticeServers: [\n\t\t{\n\t\t\turls: \"stun:stun.l.google.com:19302\",\n\t\t},\n\t],\n}\n\nconst usePeers = (localStream: MediaStream | null) => {\n\t//where all the Peer Connections Live\n\tconst [allPeerConnections, setAllPeerConnections] = useState<PeerObject>()\n\n\t//SIGNALING / SOCKET CONFIGURATION\n\t//when a final socket id is decided by the server, it is sent to the client\n\t//this id is stored in the component state\n\t//this gets around an error of multiple socket ids being supplied to a single connection\n\tconst [mySocketId, setMySocketId] = useState<string>()\n\tuseEffect(() => {\n\t\tsocket.on(\"confirm id\", () => {\n\t\t\tconsole.log(`my socket id is ${socket.id}`)\n\t\t\tsetMySocketId(socket.id)\n\t\t})\n\t}, [setMySocketId])\n\n\t//this is attached to a simplified button which should initialize the process\n\t//of the peer exchange\n\tconst joinRoom = useCallback(() => {\n\t\tconsole.log(\"request to join room\")\n\t\tif (mySocketId) socket.emit(\"join room\", mySocketId)\n\t}, [mySocketId])\n\n\tconst [currentRoom, setCurrentRoom] = useState<string>()\n\t//once the server confirms a successful join, the socket pings other peers in the room\n\t//The current room is set in state\n\tuseEffect(() => {\n\t\tsocket.on(\"confirm join\", (roomid: string) => {\n\t\t\tconsole.log(`Currently in room: ${roomid}`)\n\t\t\tsetCurrentRoom(roomid)\n\t\t\tif (mySocketId && roomid) socket.emit(\"ping peers\", roomid)\n\t\t})\n\t}, [mySocketId, setCurrentRoom])\n\n\t//peer listens for these pings\n\t//INIT PEER CONNECTION HERE\n\tuseEffect(() => {\n\t\tsocket.on(\"ping peers\", (remoteid: string) => {\n\t\t\tconsole.log(`socket ${remoteid} is trying to reach you...`)\n\t\t\tconsole.log(`init peer connection with ${remoteid}`)\n\t\t\tinitNewPeerConnection(remoteid)\n\t\t})\n\t})\n\t//error handlers\n\tconst [allStreams, setAllStreams] = useState<MediaStream[]>([])\n\n\t//when a remote stream is added to a peer conn, the stream is added\n\t//to an array of MediaStreams\n\tconst handleRemoteStreamAdded = useCallback(\n\t\te => {\n\t\t\tconsole.log(\"remote stream received\")\n\t\t\tconst remoteStream = new MediaStream()\n\t\t\tremoteStream.addTrack(e.track)\n\t\t\tsetAllStreams(prevStreams => [...prevStreams, remoteStream])\n\t\t},\n\t\t[setAllStreams]\n\t)\n\n\tconst initNewPeerConnection = useCallback(\n\t\t(remoteid: string) => {\n\t\t\ttry {\n\t\t\t\tconst peerConnection = new RTCPeerConnection(serverConfig)\n\t\t\t\t// peerConnection.addEventListener(\"icecandidate\", e =>\n\t\t\t\t// \thandleICECandidate(e, remoteid, socket)\n\t\t\t\t// )\n\t\t\t\tpeerConnection.addEventListener(\"track\", handleRemoteStreamAdded)\n\n\t\t\t\tpeerConnection.onnegotiationneeded = () =>\n\t\t\t\t\tpeerConnection\n\t\t\t\t\t\t.createOffer()\n\t\t\t\t\t\t.then(offer =>\n\t\t\t\t\t\t\tlocalDescriptionCreated(socket, peerConnection, remoteid, offer)\n\t\t\t\t\t\t)\n\t\t\t\tif (localStream)\n\t\t\t\t\tlocalStream\n\t\t\t\t\t\t.getTracks()\n\t\t\t\t\t\t.forEach((track: MediaStreamTrack) =>\n\t\t\t\t\t\t\tpeerConnection.addTrack(track)\n\t\t\t\t\t\t)\n\t\t\t\tconsole.log(\"created RTC PeerConnection\")\n\t\t\t\tsetAllPeerConnections(prevConnections => {\n\t\t\t\t\treturn { ...prevConnections, [remoteid]: peerConnection }\n\t\t\t\t})\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(`Failed to create Peer Connection. Error: ${e}`)\n\t\t\t\treturn\n\t\t\t}\n\t\t\t//establish new peer connection and add STUN server config\n\t\t},\n\t\t[localStream, setAllPeerConnections, handleRemoteStreamAdded]\n\t)\n\n\t//Logging All the Peer Connections\n\tuseEffect(() => {\n\t\tconsole.log(allPeerConnections)\n\t}, [allPeerConnections])\n\n\t//SOCKET EVENT LISTENERS FOR ICE CANDIDATE, SDP OFFER AND ANSWER\n\tuseEffect(() => {\n\t\tsocket.on(\"send offer\", (offerPayload: OfferPayload) => {\n\t\t\tconsole.log(\"received SDP offer\")\n\t\t\t//since this is the first time this client is hearing from\n\t\t\t//the remote peer, we need to establish a new PC here\n\t\t\tconst { remoteid, offer } = offerPayload\n\n\t\t\tconst peerConnection = new RTCPeerConnection(serverConfig)\n\t\t\t// peerConnection.addEventListener(\"icecandidate\", e =>\n\t\t\t// \thandleICECandidate(e, remoteid, socket)\n\t\t\t// )\n\t\t\tpeerConnection.addEventListener(\"track\", handleRemoteStreamAdded)\n\t\t\tsetAllPeerConnections(prevConn => {\n\t\t\t\treturn { ...prevConn, [remoteid]: peerConnection }\n\t\t\t})\n\t\t\t//lookup in peerconnection dictionary using remoteid as key\n\t\t\tconsole.log(`local stream: ${localStream}`)\n\t\t\tif (localStream) {\n\t\t\t\treceiveOffer(peerConnection, offer, localStream, socket, remoteid)\n\t\t\t\tconsole.log(\"listening for ICE candidates\")\n\t\t\t\tpeerConnection.addEventListener(\"icecandidate\", e => {\n\t\t\t\t\thandleICECandidate(e, remoteid, socket)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tconsole.error(\n\t\t\t\t\t\"You've received an SDP offer, but either your local stream isn't connected or something went wrong initializing the peer connection\"\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t}, [allPeerConnections, localStream, handleRemoteStreamAdded])\n\n\t//Socket message for receiving an answer to SDP offer\n\tuseEffect(() => {\n\t\tsocket.on(\"send answer\", async (answerPayload: OfferPayload) => {\n\t\t\tconsole.log(\"received SDP answer!\")\n\t\t\tconst { remoteid, offer } = answerPayload\n\t\t\t//find the current peer connection in dictionary\n\t\t\tconst currentPC = allPeerConnections ? allPeerConnections[remoteid] : null\n\t\t\tif (currentPC) {\n\t\t\t\treceiveAnswer(currentPC, offer)\n\n\t\t\t\tconsole.log(\"listening for ICE candidates\")\n\t\t\t\tcurrentPC.addEventListener(\"icecandidate\", e => {\n\t\t\t\t\thandleICECandidate(e, remoteid, socket)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tconsole.error(\"the current peer connection could not be found\")\n\t\t\t}\n\t\t})\n\t}, [allPeerConnections])\n\n\t//Socket message for receiving ICE candidates\n\tuseEffect(() => {\n\t\tsocket.on(\"send ICE candidate\", async (IcePayload: ICEPayload) => {\n\t\t\tconsole.log(\"received ICE candidate from remote peer!\")\n\t\t\tconst { remoteid, candidate } = IcePayload\n\t\t\tconst currentPC = allPeerConnections ? allPeerConnections[remoteid] : null\n\t\t\tif (currentPC?.remoteDescription)\n\t\t\t\tawait currentPC?.addIceCandidate(candidate)\n\t\t})\n\t}, [allPeerConnections])\n\n\treturn {\n\t\tallStreams,\n\t\tjoinRoom,\n\t}\n}\n\nexport default usePeers\n","/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/components/Video.tsx",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/index.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveICECandidate.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/errorHandlers.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/localDescriptionCreated.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveAnswer.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/handleICECandidate.ts",[],"/Users/johncarrick/Web/current-projects/convergence/project/convergence-live/client/src/hooks/helpers/receiveOffer.ts",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":1,"column":30,"nodeType":"69","messageId":"70","endLine":1,"endColumn":39},{"ruleId":"67","severity":1,"message":"71","line":5,"column":2,"nodeType":"69","messageId":"70","endLine":5,"endColumn":11},{"ruleId":"67","severity":1,"message":"72","line":6,"column":2,"nodeType":"69","messageId":"70","endLine":6,"endColumn":9},{"ruleId":"67","severity":1,"message":"73","line":9,"column":2,"nodeType":"69","messageId":"70","endLine":9,"endColumn":21},{"ruleId":"67","severity":1,"message":"74","line":46,"column":9,"nodeType":"69","messageId":"70","endLine":46,"endColumn":20},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'onSuccess' is defined but never used.","'onError' is defined but never used.","'receiveICECandidate' is defined but never used.","'currentRoom' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]